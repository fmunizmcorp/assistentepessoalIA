openapi: 3.1.0
jsonSchemaDialect: https://json-schema.org/draft/2020-12/schema
info:
  title: Orquestrador de IAs
  version: "1.2.1"
servers:
  - url: https://assistentepessoalia.onrender.com
paths:
  /api/health:
    get:
      operationId: health
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
  /api/repo/ensure-structure:
    post:
      operationId: ensureStructure
      security: [{ ApiKeyAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [scope]
              properties:
                scope: { type: string, enum: [global, demand] }
                demandSlug: { type: string }
                version: { type: integer, minimum: 1 }
                title: { type: string }
                dryRun: { type: boolean }
      responses:
        "200":
          description: Structure ensured
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  paths: { type: object }
  /api/demand/init:
    post:
      operationId: initDemand
      security: [{ ApiKeyAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [slug]
              properties:
                slug: { type: string }
                title: { type: string }
                version: { type: integer, minimum: 1, default: 1 }
                dryRun: { type: boolean }
      responses:
        "200":
          description: Demand initialized
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  paths: { type: object }
  /api/knowledge/save:
    post:
      operationId: saveKnowledge
      security: [{ ApiKeyAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [scope, filename, content]
              properties:
                scope: { type: string, enum: [global, demand] }
                demandSlug: { type: string }
                version: { type: integer, minimum: 1 }
                filename: { type: string }
                content: {}
                area: { type: string, enum: [notes, inputs, outputs], default: notes }
      responses:
        "200":
          description: Saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  path: { type: string }
                  urls:
                    type: object
                    properties:
                      html_url: { type: string }
                      raw_url: { type: string }
  /api/file/save-base64:
    post:
      operationId: saveFileBase64
      security: [{ ApiKeyAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [scope, filename, base64]
              properties:
                scope: { type: string, enum: [global, demand] }
                demandSlug: { type: string }
                version: { type: integer, minimum: 1 }
                area: { type: string, enum: [inputs, outputs], default: inputs }
                filename: { type: string }
                base64: { type: string }
      responses:
        "200":
          description: Saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  path: { type: string }
                  urls:
                    type: object
                    properties:
                      html_url: { type: string }
                      raw_url: { type: string }
  /api/url/canonicalize:
    get:
      operationId: canonicalize
      parameters:
        - in: query
          name: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  path: { type: string }
                  url: { type: string }
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
  schemas: {}
