openapi: 3.0.3
info:
  title: Orchestrator + Browser Runner API
  version: 1.0.0
servers:
  - url: https://assistentepessoalia.onrender.com
paths:
  /health:
    get:
      summary: Healthcheck
      responses:
        '200': { description: OK }
  /openapi.yaml:
    get:
      summary: OpenAPI spec
      responses:
        '200': { description: OK }
  /api/orch/demand/new:
    post:
      summary: Cria demanda
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                slug: { type: string }
      responses:
        '200': { description: Criada }
  /api/orch/fanout:
    post:
      summary: Dispara passos em paralelo (inclui browser-action)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                demandId: { type: string }
                steps:
                  type: array
                  items:
                    type: object
                    properties:
                      kind: { type: string, enum: [text, browser-action] }
                      provider: { type: string }
                      payload: { type: object }
      responses:
        '200': { description: Em execução }
  /api/integrations/save-doc:
    post:
      summary: Salva evidências no repositório da demanda
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                demandId: { type: string }
                relPath: { type: string }
                contentBase64: { type: string }
      responses:
        '200': { description: OK }
  /api/secrets/set:
    post:
      summary: Grava credencial de provedor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                provider: { type: string }
                key: { type: string }
                value: { type: string }
                plaintext: { type: boolean }
      responses:
        '200': { description: OK }
  /api/secrets/get:
    post:
      summary: Lê credencial de provedor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                provider: { type: string }
                key: { type: string }
      responses:
        '200': { description: OK }
  /api/browser/task:
    post:
      summary: Cria uma tarefa de automação UI
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                provider: { type: string, enum: [chatgpt, genspark, grok, manus] }
                action: { type: string, enum: [prompt] }
                payload: { type: object }
                demandId: { type: string }
                repoTarget: { type: string }
      responses:
        '200': { description: ID da tarefa }
  /api/browser/status/{id}:
    get:
      summary: Status de tarefa UI
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Status }
